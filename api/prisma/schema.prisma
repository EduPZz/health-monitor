// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  password       String
  email          String         @unique
  name           String
  timezone       String         @default("UTC")
  smartwatchCode String?
  smartwatch     smartwatch?     @relation(fields: [smartwatchCode], references: [code])
  Exercise       Exercise[]
  BodyMeasure    BodyMeasure[]
  consultation   consultation[]
}

model Exercise {
  id        Int      @id @default(autoincrement())
  beginTime DateTime
  endTime   DateTime
  type      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BodyMeasure {
  id        Int      @id @default(autoincrement())
  chest     Int // Measurement of arm circumference in cm
  arm       Int // Measurement of arm circumference in cm
  waist     Int // Waist circumference in cm
  thigh     Int // Thigh circumference in cm
  hip       Int // Hip circumference in cm
  calf      Int // Calf circumference in cm
  weight    Decimal // kg
  height    Decimal // Meters
  createdAt DateTime @default(now()) // Timestamp for tracking when the measurements were taken
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model consultation {
  id             Int      @id @default(autoincrement())
  scheduleDate   DateTime
  doctorName     String
  description    String
  specialization String
  userId         Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model smartwatch {
  code         String @id
  bloodGlucose Int
  heartbeat    Int
  systolic     Int
  diastolic    Int
  User         User[]
}
