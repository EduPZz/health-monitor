// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompanionRequestStatus {
  pending
  accepted
  rejected
}

enum MeasurementTypes {
  scale
  form
}

enum BluetoothScalesStatus {
  connected
  disconnected
}

enum UserSex {
  male
  female
}

model User {
  id                         Int                  @id @default(autoincrement())
  password                   String
  email                      String               @unique
  name                       String
  timezone                   String               @default("UTC")
  birthDate                  DateTime
  sex                        UserSex
  Exercise                   Exercise[]
  BodyMeasure                BodyMeasure[]
  consultation               Consultation[]
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  accompaniedBy              UserCompanion[]      @relation("accompaniedBy")
  accompanying               UserCompanion[]      @relation("accompanying")
  sentCompanionRequest       CompanionRequest[]   @relation("sentCompanionRequest")
  receivedCompanionRequest   CompanionRequest[]   @relation("receivedCompanionRequest")
  measurementEvents          MeasurementEvents[]
  executedMeasurementSession MeasurementSession[] @relation("measurementExecuter")
  measurementSession         MeasurementSession[] @relation("measuredUser")
  BluetoothScales            BluetoothScales[]
}

model UserCompanion {
  id              Int      @id @default(autoincrement())
  accompaniedById Int
  accompaniedBy   User     @relation("accompaniedBy", fields: [accompaniedById], references: [id], onDelete: Cascade)
  accompanyingId  Int
  accompanying    User     @relation("accompanying", fields: [accompanyingId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CompanionRequest {
  id             Int                    @id @default(autoincrement())
  status         CompanionRequestStatus @default(pending)
  message        String
  inviterId      Int
  inviter        User                   @relation("sentCompanionRequest", fields: [inviterId], references: [id], onDelete: Cascade)
  invitedId      Int
  invited        User                   @relation("receivedCompanionRequest", fields: [invitedId], references: [id], onDelete: Cascade)
  expirationDate DateTime
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model Exercise {
  id        Int      @id @default(autoincrement())
  beginTime DateTime
  endTime   DateTime
  type      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BodyMeasure {
  id        Int      @id @default(autoincrement())
  chest     Int // Measurement of arm circumference in cm
  arm       Int // Measurement of arm circumference in cm
  waist     Int // Waist circumference in cm
  thigh     Int // Thigh circumference in cm
  hip       Int // Hip circumference in cm
  calf      Int // Calf circumference in cm
  weight    Decimal // kg
  height    Decimal // Meters
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Consultation {
  id             Int      @id @default(autoincrement())
  scheduleDate   DateTime
  doctorName     String
  description    String
  specialization String
  userId         Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model MeasurementEvents {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  measurementSession MeasurementSession[]
}

model MeasurementSession {
  id                      Int                       @id @default(autoincrement())
  eventId                 Int?
  event                   MeasurementEvents?        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  executerId              Int
  executer                User                      @relation("measurementExecuter", fields: [executerId], references: [id], onDelete: Cascade)
  measuredUserId          Int
  measuredUser            User                      @relation("measuredUser", fields: [measuredUserId], references: [id], onDelete: Cascade)
  anonymous               Boolean                   @default(false)
  measurementType         MeasurementTypes          @default(scale)
  bluetoothScaleId        Int?
  bluetoothScale          BluetoothScales?          @relation(fields: [bluetoothScaleId], references: [id], onDelete: Cascade)
  bioimpedanceMeasurement BioimpedanceMeasurement[]
}

model BioimpedanceMeasurement {
  id                   Int                @id @default(autoincrement())
  measurementSessionId Int                @unique
  weight               Decimal?
  bodyFatPercentage    Decimal?
  muscleMass           Decimal?
  boneMass             Decimal?
  waterPercentage      Decimal?
  visceralFat          Int?
  metabolicAge         Int?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  measurementSession   MeasurementSession @relation(fields: [measurementSessionId], references: [id], onDelete: Cascade)
}

model BluetoothScales {
  id                 Int                   @id @default(autoincrement())
  status             BluetoothScalesStatus @default(disconnected)
  userId             Int
  macAddress         String
  name               String
  model              String
  brand              String
  supportsImpedance  Boolean
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  measurementSession MeasurementSession[]
}
